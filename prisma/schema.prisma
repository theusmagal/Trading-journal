generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  password         String

  // --- Profile ---
  name             String?
  timezone         String?         @default("UTC")

  // --- Timestamps ---
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  stripeCustomerId String?         @unique
  plan             String?         // e.g. "free" | "pro-monthly" | "pro-annual"

  subscriptions    Subscription[]
  brokerAccounts   BrokerAccount[]
  apiKeys          ApiKey[]
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  stripeCustomerId     String
  stripeSubscriptionId String
  status               String
  currentPeriodEnd     DateTime?
  user                 User      @relation(fields: [userId], references: [id])

  // Helpful indexes
  @@index([userId])
  @@index([stripeCustomerId])          // <— quick link to Stripe customer
  @@unique([stripeSubscriptionId])     // each Stripe sub once
}

model BrokerAccount {
  id           String        @id @default(cuid())
  userId       String
  broker       String
  label        String?
  apiKeyEnc    String
  apiSecretEnc String
  lastSyncAt   DateTime?
  user         User          @relation(fields: [userId], references: [id])

  executions   Execution[]
  trades       Trade[]
  dailyMetrics DailyMetric[]

  @@index([userId])
  @@index([userId, broker])            // <— helpful if you’ll filter by broker
}

model Execution {
  id              String        @id @default(cuid())
  brokerAccountId String
  symbol          String
  side            String
  qty             Float
  price           Float
  fee             Float
  execTime        DateTime
  tradeId         String
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])

  @@index([brokerAccountId, execTime])
  @@index([brokerAccountId, symbol, execTime])  // <— common query shape
}

model Trade {
  id              String        @id @default(cuid())
  brokerAccountId String
  symbol          String
  side            String
  openTime        DateTime
  closeTime       DateTime
  qty             Float
  avgEntry        Float
  avgExit         Float
  grossPnl        Float
  netPnl          Float
  fees            Float
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])

  @@index([brokerAccountId, closeTime])
}

model DailyMetric {
  id              String        @id @default(cuid())
  brokerAccountId String
  date            DateTime
  trades          Int
  wins            Int
  losses          Int
  winRate         Float
  profitFactor    Float
  netPnl          Float
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])

  @@unique([brokerAccountId, date])
}

//
// API keys vault (encrypted at rest)
//
model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  provider  String   // e.g. "binance"
  label     String?  // "Main", "Scalping", etc.
  keyLast4  String   // last 4 of API key for display
  encApiKey String   // base64 ciphertext
  encSecret String   // base64 ciphertext

  status    String   @default("active") // "active" | "revoked"
  createdAt DateTime @default(now())
  updatedAt      DateTime        @updatedAt @default(now())

  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
  @@index([userId, provider, status])   // <— quick filter by status
}
